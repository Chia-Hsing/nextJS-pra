{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport const getPostData = postIdentifier => {\n  const postSlug = postIdentifier.replace(/\\.md$/, '');\n  const filePath = path.join(postsDirectory, postIdentifier);\n  const fileContent = fs.readFileSync(filePath, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(fileContent);\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};\nexport const getAllPosts = () => {\n  const postFiles = fs.readdirSync(postsDirectory);\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  });\n  const sortedPost = allPosts.sort((A, B) => A.date > B.date ? -1 : 1);\n  return sortedPost;\n};\nexport const getFeaturedPosts = () => {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n};","map":{"version":3,"sources":["/Users/chia/Projects/I/NextJS/nextjs-course/lib/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostData","postIdentifier","postSlug","replace","filePath","fileContent","readFileSync","data","content","postData","slug","getAllPosts","postFiles","readdirSync","allPosts","map","postFile","sortedPost","sort","A","B","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,MAAMC,WAAW,GAAIC,cAAD,IAAoB;AAC3C,QAAMC,QAAQ,GAAGD,cAAc,CAACE,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAjB;AACA,QAAMC,QAAQ,GAAGV,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BK,cAA1B,CAAjB;AACA,QAAMI,WAAW,GAAGZ,EAAE,CAACa,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBb,MAAM,CAACU,WAAD,CAAhC;;AAEA,QAAMI,QAAQ;AACVC,IAAAA,IAAI,EAAER;AADI,KAEPK,IAFO;AAGVC,IAAAA;AAHU,IAAd;;AAMA,SAAOC,QAAP;AACH,CAbM;AAeP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,QAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAejB,cAAf,CAAlB;AAEA,QAAMkB,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AACzC,WAAOhB,WAAW,CAACgB,QAAD,CAAlB;AACH,GAFgB,CAAjB;AAIA,QAAMC,UAAU,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAhD,CAAnB;AAEA,SAAOJ,UAAP;AACH,CAVM;AAYP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AAClC,QAAMR,QAAQ,GAAGH,WAAW,EAA5B;AAEA,QAAMY,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,UAA/B,CAAtB;AAEA,SAAOH,aAAP;AACH,CANM","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport const getPostData = (postIdentifier) => {\n    const postSlug = postIdentifier.replace(/\\.md$/, '')\n    const filePath = path.join(postsDirectory, postIdentifier)\n    const fileContent = fs.readFileSync(filePath, 'utf-8')\n    const { data, content } = matter(fileContent)\n\n    const postData = {\n        slug: postSlug,\n        ...data,\n        content,\n    }\n\n    return postData\n}\n\nexport const getAllPosts = () => {\n    const postFiles = fs.readdirSync(postsDirectory)\n\n    const allPosts = postFiles.map((postFile) => {\n        return getPostData(postFile)\n    })\n\n    const sortedPost = allPosts.sort((A, B) => (A.date > B.date ? -1 : 1))\n\n    return sortedPost\n}\n\nexport const getFeaturedPosts = () => {\n    const allPosts = getAllPosts()\n\n    const featuredPosts = allPosts.filter((post) => post.isFeatured)\n\n    return featuredPosts\n}\n"]},"metadata":{},"sourceType":"module"}