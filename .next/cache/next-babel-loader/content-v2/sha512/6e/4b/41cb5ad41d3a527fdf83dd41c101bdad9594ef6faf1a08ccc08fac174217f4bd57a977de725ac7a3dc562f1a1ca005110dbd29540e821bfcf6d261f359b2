{"ast":null,"code":"import { MongoClient } from 'mongodb'; // /api/contact\n\nconst handler = async (req, res) => {\n  if (req.method === 'POST') {\n    const {\n      email,\n      message,\n      name\n    } = req.body;\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'invalid input'\n      });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    let client;\n    const connectionString = `mongodb://127.0.0.1:27017/nextCourse`;\n\n    try {\n      client = await MongoClient.connect(connectionString);\n    } catch (error) {\n      res.status(500).json({\n        message: 'Could not connect to database.'\n      });\n      return;\n    }\n\n    const db = client.db();\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: 'Storing message failed!'\n      });\n      return;\n    }\n\n    client.close();\n    res.status(201).json({\n      message: 'Successfully stored message!',\n      message: newMessage\n    });\n  }\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/chia/Projects/I/NextJS/nextjs-course/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","message","name","body","includes","trim","status","json","newMessage","client","connectionString","connect","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CACA;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACvB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA2BL,GAAG,CAACM,IAArC;;AAEA,QAAI,CAACH,KAAD,IAAU,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CAAX,IAAkC,CAACF,IAAnC,IAA2CA,IAAI,CAACG,IAAL,OAAgB,EAA3D,IAAiE,CAACJ,OAAlE,IAA6EA,OAAO,CAACI,IAAR,OAAmB,EAApG,EAAwG;AACpGP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH;;AAED,UAAMO,UAAU,GAAG;AACfR,MAAAA,KADe;AAEfE,MAAAA,IAFe;AAGfD,MAAAA;AAHe,KAAnB;AAMA,QAAIQ,MAAJ;AAEA,UAAMC,gBAAgB,GAAI,sCAA1B;;AAEA,QAAI;AACAD,MAAAA,MAAM,GAAG,MAAMd,WAAW,CAACgB,OAAZ,CAAoBD,gBAApB,CAAf;AACH,KAFD,CAEE,OAAOE,KAAP,EAAc;AACZd,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH;;AAED,UAAMY,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;;AAEA,QAAI;AACA,YAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCR,UAApC,CAArB;AACAA,MAAAA,UAAU,CAACS,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACH,KAHD,CAGE,OAAON,KAAP,EAAc;AACZH,MAAAA,MAAM,CAACU,KAAP;AACArB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACH;;AAEDQ,IAAAA,MAAM,CAACU,KAAP;AAEArB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,MAAAA,OAAO,EAAE,8BAAX;AAA2CA,MAAAA,OAAO,EAAEO;AAApD,KAArB;AACH;AACJ,CAzCD;;AA2CA,eAAeZ,OAAf","sourcesContent":["import { MongoClient } from 'mongodb'\n// /api/contact\n\nconst handler = async (req, res) => {\n    if (req.method === 'POST') {\n        const { email, message, name } = req.body\n\n        if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n            res.status(422).json({ message: 'invalid input' })\n            return\n        }\n\n        const newMessage = {\n            email,\n            name,\n            message,\n        }\n\n        let client\n\n        const connectionString = `mongodb://127.0.0.1:27017/nextCourse`\n\n        try {\n            client = await MongoClient.connect(connectionString)\n        } catch (error) {\n            res.status(500).json({ message: 'Could not connect to database.' })\n            return\n        }\n\n        const db = client.db()\n\n        try {\n            const result = await db.collection('messages').insertOne(newMessage)\n            newMessage.id = result.insertedId\n        } catch (error) {\n            client.close()\n            res.status(500).json({ message: 'Storing message failed!' })\n            return\n        }\n\n        client.close()\n\n        res.status(201).json({ message: 'Successfully stored message!', message: newMessage })\n    }\n}\n\nexport default handler\n"]},"metadata":{},"sourceType":"module"}